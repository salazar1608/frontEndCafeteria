{"ast":null,"code":"import { Compra } from 'src/app/Modelo/Compra';\nimport { ProdcutosCompra } from 'src/app/Modelo/ProductosCompra';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Service/compras.service\";\nimport * as i2 from \"src/app/Service/productos.service\";\nimport * as i3 from \"src/app/Service/serviciotable.service\";\nimport * as i4 from \"@angular/common\";\nfunction ComprasComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 3)(6, \"button\", 5);\n    i0.ɵɵelement(7, \"i\", 6);\n    i0.ɵɵtext(8, \" Detalles\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const b_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(b_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(b_r1.nombre);\n  }\n}\nexport let ComprasComponent = /*#__PURE__*/(() => {\n  class ComprasComponent {\n    constructor(servicioCompras, servicioProductos, serviceTable) {\n      this.servicioCompras = servicioCompras;\n      this.servicioProductos = servicioProductos;\n      this.serviceTable = serviceTable;\n      this.mostrarNuevaCompra = false;\n      this.totalNuevaCompra = 0;\n      this.mostrarDetalles = false;\n    }\n    ngOnInit() {\n      this.serviceTable.getTable().subscribe(data => {\n        this.obj = data;\n        //this.traerProductos();\n      }, error => {\n        console.log(error);\n      });\n    }\n    verDetalles(compra) {\n      this.mostrarDetalles = true;\n      this.servicioProductos.getProductosNuevaCompra(compra.codigo, this.getRolDB()).subscribe(data => {\n        this.productosNuevaCompra = data;\n        this.codigoDetalleCompra = compra.codigo;\n        this.totalNuevaCompra = compra.total_compra;\n      });\n    }\n    filtrarCompras(filtro) {\n      console.log(\"filtro: \" + filtro);\n    }\n    getRolDB() {\n      let stringUser = localStorage.getItem('usuario');\n      let usuario = stringUser ? JSON.parse(stringUser) : null;\n      let rol = usuario ? usuario.rol : 0;\n      return rol;\n    }\n    getIDUser() {\n      let stringUser = localStorage.getItem('usuario');\n      let usuario = stringUser ? JSON.parse(stringUser) : null;\n      let rol = usuario ? usuario.identificacion : 0;\n      return rol;\n    }\n    getSucursal() {\n      let stringUser = localStorage.getItem('usuario');\n      let usuario = stringUser ? JSON.parse(stringUser) : null;\n      let suc = usuario ? usuario.sucursal : 0;\n      return suc;\n    }\n    nuevaCompra() {\n      //hacer que se agregue una nueva compra\n      this.productosNuevaCompra = [];\n      this.totalNuevaCompra = 0;\n      this.mostrarNuevaCompra = true;\n      let compra = new Compra();\n      compra.usuario = this.getIDUser();\n      compra.sucursal = this.getSucursal();\n      this.servicioCompras.nuevaCompra(compra, this.getRolDB()).subscribe(data => {\n        this.codigoNuevaCompra = data.codigo_compra;\n        console.log(this.codigoNuevaCompra);\n      }, error => {\n        console.log(error);\n      });\n    }\n    traerProductosNuevaCompra(idC) {\n      this.servicioProductos.getProductosNuevaCompra(idC, this.getRolDB()).subscribe(data => {\n        this.productosNuevaCompra = data;\n      }, error => {\n        console.log(error);\n      });\n    }\n    agregarProductoACompra(nuevaCompraForm) {\n      let pc = new ProdcutosCompra(this.codigoNuevaCompra, parseInt(this.productoSeleccionado), this.cantidadProducto, this.precioProducto);\n      this.servicioProductos.nuevoProductoCompra(pc, this.getRolDB()).subscribe(data => {\n        console.log(data);\n        this.traerProductosNuevaCompra(this.codigoNuevaCompra);\n        nuevaCompraForm.resetForm();\n        this.totalNuevaCompra += pc.cantidad * pc.precio_unitario;\n        this.traerProductos();\n      }, error => {\n        console.log(error);\n        alert(\"No cuentas con el dinero sufuciente para realizar esta compra, por favor comunicate con el administrador\");\n      });\n    }\n    traerProductos() {\n      this.servicioProductos.getProductosSucursal(this.getSucursal(), this.getRolDB()).subscribe(data => {\n        this.productos = data;\n      }, error => {\n        console.log(error);\n      });\n    }\n    dejarDeMostrarNuevaCompra() {\n      this.mostrarNuevaCompra = false;\n      if (this.totalNuevaCompra == 0) {\n        //eliminar la compra\n        this.servicioCompras.deleteCompra(this.getRolDB(), this.codigoNuevaCompra).subscribe(data => {\n          console.log(\"compra eliminada\");\n          this.ngOnInit();\n        });\n      } else {\n        this.ngOnInit();\n      }\n    }\n    cancelarCompra() {\n      this.servicioCompras.cancelarCompra(this.getRolDB(), this.codigoNuevaCompra).subscribe(data => {\n        alert(\"Se la cancelado al compra!\");\n        this.mostrarNuevaCompra = false;\n        this.ngOnInit();\n      }, error => {\n        console.log(error);\n      });\n    }\n    static #_ = this.ɵfac = function ComprasComponent_Factory(t) {\n      return new (t || ComprasComponent)(i0.ɵɵdirectiveInject(i1.ComprasService), i0.ɵɵdirectiveInject(i2.ProductosService), i0.ɵɵdirectiveInject(i3.ServiciotableService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ComprasComponent,\n      selectors: [[\"app-compras\"]],\n      decls: 15,\n      vars: 2,\n      consts: [[1, \"container\", \"mt-5\", \"pt-5\"], [1, \"card\"], [1, \"table\", \"table-bordered\"], [1, \"text-center\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-warning\", \"me-2\", \"col-sm-5\"], [1, \"bi\", \"bi-eye\"]],\n      template: function ComprasComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"table\", 2)(5, \"thead\")(6, \"tr\")(7, \"th\");\n          i0.ɵɵtext(8, \"Codigo\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"th\");\n          i0.ɵɵtext(10, \"Nombre\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"th\", 3);\n          i0.ɵɵtext(12, \"ACCIONES\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"tbody\");\n          i0.ɵɵtemplate(14, ComprasComponent_tr_14_Template, 9, 2, \"tr\", 4);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Totales (\", ctx.obj.length, \") \");\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"ngForOf\", ctx.obj);\n        }\n      },\n      dependencies: [i4.NgForOf]\n    });\n  }\n  return ComprasComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}